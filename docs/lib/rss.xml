<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[mogacko]]></title><description><![CDATA[Obsidian digital garden]]></description><link>http://github.com/dylang/node-rss</link><image><url>lib\media\favicon.png</url><title>mogacko</title><link/></image><generator>Webpage HTML Export plugin for Obsidian</generator><lastBuildDate>Mon, 05 Aug 2024 14:45:06 GMT</lastBuildDate><atom:link href="lib\rss.xml" rel="self" type="application/rss+xml"/><pubDate>Mon, 05 Aug 2024 14:45:05 GMT</pubDate><ttl>60</ttl><dc:creator/><item><title><![CDATA[계획]]></title><description><![CDATA[ 
 <br><br>프로젝트의 목표에 맞는 데이터 특성에 가장 적합한 손실 함수를 찾기 위해 다양한 손실함수에 대해 공부한다. 각 로스함수의 수학적 정의 및 유도과정 이해, 각 로스함수가 사용되는 모델과 그 이유(어떤 모델과 문제에 적합한지), 장 단점 분석, 간단한 구현예제를 작성해보면서 이해해본다. 또한 다양한 학습방법 및 디퓨전모델에 대해서도 알아본다. 더불어 energy-based model에대해서 알아본다.<br>회의방법<br>
온라인(naver whale on) *zoom은 40분이상하려면 유료로 결제를 해야하기 때문에 whale on을 활용했습니다. <br>팀원 블로그<br>
박세준 <a rel="noopener" class="external-link" href="https://kepler-dev-3141.github.io/" target="_blank">https://kepler-dev-3141.github.io/</a><br>
신우석 <a rel="noopener" class="external-link" href="https://blog.naver.com/sws040201/" target="_blank">https://blog.naver.com/sws040201/</a><br>
김채연 <a rel="noopener" class="external-link" href="https://kcyeon0127.github.io/" target="_blank">https://kcyeon0127.github.io/</a><br><br><br><br>Wasserstein Loss를 사용한 GAN 예제 코드와 Binary Cross-Entropy (BCE) Loss를 사용한 GAN 예제코드를 작성해보면서 BCE-loss의 기울기 소실 문제와 모드 붕괴 문제의 해결책이 될 수 있는지 직접 알아본다.<br><br><a data-tooltip-position="top" aria-label="https://colab.research.google.com/drive/1oQKL3AEJPOhZGUZVm0DrDM30hX68jYgz#scrollTo=BhxXGq-SEsQW" rel="noopener" class="external-link" href="https://colab.research.google.com/drive/1oQKL3AEJPOhZGUZVm0DrDM30hX68jYgz#scrollTo=BhxXGq-SEsQW" target="_blank">Compare GAN with BCE to with Wasser.ipynb - Colab (google.com)</a><br>간단한 1차원데이터(숫자)를 랜덤으로 생성을 하여 진행하였습니다.<br><br><img alt="team-blog-코딩황제들-2024-week3.BCE-LOSS.loss-graph.png" src="lib\media\team-blog-코딩황제들-2024-week3.bce-loss.loss-graph.png"><br>
<img alt="team-blog-코딩황제들-2024-week4.BCE-LOSS.gradient-graph.png" src="lib\media\team-blog-코딩황제들-2024-week4.bce-loss.gradient-graph.png"><br><br>
<br>
Discriminator Loss: 판별자의 손실은 초기에는 약간의 변동을 보이다가 이후 안정화되는 경향을 보입니다. 하지만 전반적인 감소 추세가 뚜렷하지 않고, 일정한 범위 내에서 변동이 반복됩니다.

<br>
Generator Loss: 생성자의 손실은 초기에는 감소하는 경향을 보이다가 이후 증가하는 경향을 보입니다. 이는 생성자가 학습이 진행될수록 판별자를 속이는 능력이 감소하고 있음을 나타낼 수 있습니다.

<br><br>
<br>Gradient Mean: 그래디언트 평균이 초기에는 음수에서 시작해 점차 증가하는 경향을 보입니다. 이는 기울기 소실 문제는 발생하지 않지만, 그래디언트가 매우 작거나 큰 값을 가질 수 있다는 것을 나타냅니다.
<br><br><br>
<br>판별자와 생성자의 손실이 모두 안정적으로 감소하지 않는 점이 주목됩니다. 특히 생성자의 손실이 후반부에 증가하는 경향은 기울기 소실 문제로 인해 생성자의 학습이 제대로 이루어지지 않고 있음을 나타낼 수 있습니다.
<br>손실이 감소하지 않고 변동이 계속되는 것은 모델이 최적화 과정에서 어려움을 겪고 있음을 의미할 수 있습니다.
<br><br>
<br>그래디언트의 평균이 증가하는 경향을 보이지만, 초기에는 매우 작은 값을 가지다가 점차 커지는 패턴을 보입니다. 이는 기울기 소실 문제는 발생하지 않지만, 그래디언트가 안정적이지 않다는 것을 나타냅니다.
<br>그래디언트의 큰 변동은 모델 학습 과정에서 불안정성을 초래할 수 있습니다.
<br><br><img alt="team-blog-코딩황제들-2024-week4.WASSERSTAIN-LOSS.loss-graph.png" src="lib\media\team-blog-코딩황제들-2024-week4.wasserstain-loss.loss-graph.png"><br>
<img alt="team-blog-코딩황제들-2024-week4.WASSERSTAIN-LOSS.gradient-graph.png" src="lib\media\team-blog-코딩황제들-2024-week4.wasserstain-loss.gradient-graph.png"><br>
* GP란?<br>
GP는 Gradient Penalty로 모델 학습 중 기울기의 크기를 일정하게 유지하도록 강제하는 방법입니다. 이를 통해 기울기 소실 문제를 완화하고, 생성자와 판별자가 더 안정적으로 학습할 수 있게 합니다. Gradient Penalty는 실제 데이터와 생성된 데이터 사이의 보간(interpolation) 데이터를 사용하여 계산됩니다. 보간 데이터에서 기울기를 계산하고, 이 기울기가 1에 가깝도록 제약을 가합니다.*<br><br>
<br>Discriminator Loss: 전반적으로 감소하는 추세를 보이지만, 중간중간 변동이 있습니다. 이는 훈련 중 판별자가 생성자의 학습에 따라 변동하는 정상적인 현상일 수 있습니다.
<br>Generator Loss: 초기에는 거의 변동이 없지만, 점차 감소하는 추세를 보입니다. 이는 생성자가 판별자를 속이는 능력을 점차 향상시키고 있다는 것을 나타냅니다.
<br><br>
<br>Gradient Mean: 그래디언트 평균이 0에 가까운 값을 유지하다가 중간에 급격히 증가했다가 다시 감소하는 패턴을 보입니다. 이는 기울기 소실 문제를 해결했음을 나타낼 수 있습니다. WGAN-GP에서 그래디언트 페널티를 사용하여 기울기의 크기를 일정하게 유지하려는 목적에 부합합니다.
<br><br><br>
<br>생성자와 판별자 손실 모두 전반적으로 감소하는 추세를 보이는 것은 모델이 잘 학습되고 있다는 신호입니다.
<br>판별자 손실의 변동은 생성자가 점차 더 현실적인 데이터를 생성함에 따라 판별자가 적응하고 있다는 것을 나타낼 수 있습니다.
<br><br>
<br>그래디언트 평균이 0에 가까운 값을 유지하고 있는 것은 좋은 신호입니다. 이는 기울기 소실 문제를 피하고 있음을 나타냅니다.
<br>그래디언트의 변동은 모델 학습 중 발생할 수 있는 정상적인 현상입니다.
<br><br>
<br>WGAN-GP 모델이 기울기 소실 문제를 효과적으로 해결하고 있으며, 생성자와 판별자가 균형 있게 학습되고 있음을 나타냅니다.
<br>기울기 소실 문제를 해결하기 위한 Gradient Penalty가 잘 작동하고 있음을 그래디언트 평균의 변동을 통해 확인할 수 있습니다.
<br>BCE 손실을 사용하는 GAN은 기울기 소실 문제를 겪고 있지 않을 수 있지만, 학습 과정에서 안정적으로 최적화되지 않고 있음을 알 수 있습니다.
<br>WGAN-GP와 비교했을 때, BCE 손실을 사용하는 GAN은 생성자와 판별자의 손실이 안정적으로 감소하지 않으며, 그래디언트도 안정적이지 않습니다.
<br>이는 WGAN-GP가 기울기 소실 문제와 모델 학습의 안정성 측면에서 더 우수하다는 것을 보여줍니다.
<br><br><br><br><br><br><br>​<br><br><br><br><br>]]></description><link>team's-blog\코딩황제들\8월-4일-모각코.html</link><guid isPermaLink="false">team's blog/코딩황제들/8월 4일 모각코.md</guid><pubDate>Mon, 05 Aug 2024 14:44:56 GMT</pubDate><enclosure url="lib\media\team-blog-코딩황제들-2024-week3.bce-loss.loss-graph.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="lib\media\team-blog-코딩황제들-2024-week3.bce-loss.loss-graph.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[계획]]></title><description><![CDATA[ 
 <br><br>프로젝트의 목표에 맞는 데이터 특성에 가장 적합한 손실 함수를 찾기 위해 다양한 손실함수에 대해 공부한다. 각 로스함수의 수학적 정의 및 유도과정 이해, 각 로스함수가 사용되는 모델과 그 이유(어떤 모델과 문제에 적합한지), 장 단점 분석, 간단한 구현예제를 작성해보면서 이해해본다. 또한 다양한 학습방법 및 디퓨전모델에 대해서도 알아본다.<br>회의방법<br>
온라인(naver whale on) *zoom은 40분이상하려면 유료로 결제를 해야하기 때문에 whale on을 활용했습니다.<br>팀원 블로그<br>
박세준 <a rel="noopener" class="external-link" href="https://kepler-dev-3141.github.io/" target="_blank">https://kepler-dev-3141.github.io/</a><br>
신우석 <a rel="noopener" class="external-link" href="https://blog.naver.com/sws040201/" target="_blank">https://blog.naver.com/sws040201/</a><br>
김채연 <a rel="noopener" class="external-link" href="https://kcyeon0127.github.io/" target="_blank">https://kcyeon0127.github.io/</a><br><br><br><br>wassertein 손실함수의 정의 및 배경 특히 이를 이해하기 위해 필요한 개념인 Earth Mover's Distance (EMD) 에 대해 알아본다.<br><br><br>Wasserstein Distance를 최소화하는 방식으로 GAN을 훈련시키는 손실함수<br><br>GAN 에서 주로 사용하는 loss fuction인  bce loss의 문제점 때문에 나오게 되었습니다.<br>
BCE LOSS의 문제점<br>
*1. mode collapse(모드 붕괴): 생성자가 다양한 이미지를  만들어내지 못하고 비슷한 이미지만 계속해서 생성하는 경우<br>
2.  vanishing gradient(기울기 소실): bce 손실함수는 판별자가 점점 더 정확해짐에 따라 0 또는 1에 가까운 극단적인 값을 출력하게 만듭니다. 이는 판별자가 실제와 가짜 데이터를 잘 구분할수록 생성자가 받는 그래디언트 값이 매우 작아져서 학습이 정체되게  됩니다. 생성자는 더 이상 유의미한 피드백을 받지 못하고, 학습이 중지될 수 있습니다.<br><br> earth는 흙, 그래서 흙을 움직이는 거리라는 의미이다.<br>
*정의: 두 확률 분포 P와 Q 사이의 EMD는 P에서 Q로의 '흙'을 옮기는 최소 비용으로 정의된다. 즉, 생성된분포를 진짜와 동일하게 만드는 데 필요한 노력의 양을 추정하여 이 두 분포가 얼마나 다른지를 측정합니다. <br>분산은 같지만 평균이 다른 생성된 분포와 진짜 분포를 사용하며, 이들이 정규 분포라고 가정!<br><img alt="team-blog-코딩황제들-2024-week1.20240714212929.png" src="lib\media\team-blog-코딩황제들-2024-week1.20240714212929.png"><br>
함수는 생성된 분포를 이동해야 하는 거리와 양에 따라 다릅니다.(양과 거리의 함수)<br>
<img alt="lib/media/team-blog-코딩황제들-2024-week1.20240714225208.png" src="lib\media\team-blog-코딩황제들-2024-week1.20240714225208.png"><br>
<br>거리의 한계 없음:

<br>EMD는 두 분포 사이의 최적 운송 비용을 측정하며, 이 거리는 0과 1로 제한되지 않습니다. 즉, 분포 간의 차이가 클수록 거리가 계속 증가할 수 있습니다.


<br>기울기 유지:<br>
- EMD의 기울기는 분포 간 차이가 커질수록 계속해서 유의미한 값을 유지합니다. 이는 생성자가 받는 기울기가 0에 가까워지지 않음을 의미합니다.<br>
- 결과적으로, GAN의 생성자는 계속해서 학습할 수 있는 유의미한 피드백을 받게 되어 기울기 소실 문제를 겪지 않습니다.<br>
공식<br>
<img alt="lib/media/team-blog-코딩황제들-2024-week1.20240714234641.png" src="lib\media\team-blog-코딩황제들-2024-week1.20240714234641.png">
<br><br> inf(infimum): 하한, 주어진 범위에서의 최소값<br>
*γ(감마): P와 Q사이의 가능한 모든 운송 계획, P의 질량을 Q로 옮기는 방법을 의미합니다.<br>
E(기댓값): 주어진 결합 분포 γ에 대해, x와 y 사이의 거리에 대한 기대값을 의미합니다.<br><br><br>CLIP 학습 방법의 정의와 전반적인 개념 학습<br><br><br>
CLIP: Contrastive Language–Image Pre-training
<br>기존 SOTA<a data-href="1" href="1" class="internal-link" target="_self" rel="noopener">1</a>(<a rel="noopener" class="external-link" href="https://kepler-dev-3141.github.io/#fn-1-e3f99f632f1087fe" target="_blank">https://kepler-dev-3141.github.io/#fn-1-e3f99f632f1087fe</a>)&nbsp;Computer vision 시스템은 ImageNet과 같이 crowd-labeled 데이터셋을 이용하여 학습합니다. 이것은 정해진 카테고리 내에서 예측하도록 학습합니다. 이러한 학습 방법은 기존 데이터셋에 없는 라벨을 분류하기 위해서는 추가적인 데이터가 필요하고, 이것은 일반성과 사용성을 해치는 단점이 있습니다.<br>
자연어 처리 부분에서는 crowd-labeled 데이터셋을 사용하는 것 보다 웹 규모의 텍스트 모음을 사용하는 것이 좋은 결과를 가져온다는 선례가 있었습니다. 기존 SOTA Computer vision 시스템은 crowd-labeled 데이터셋을 사용하여 pre-training 하는 것이 일반적이었습니다. 이러한 방법을 Computer vision에도 적용하면 성능이 좋아지지 않을까 하며 만들어진 것이 CLIP입니다.<br><br><br>자연어를 supervision<a data-href="2" href="2" class="internal-link" target="_self" rel="noopener">2</a>(<a data-tooltip-position="top" aria-label="https://kepler-dev-3141.github.io/#fn-2-e3f99f632f1087fe)%EC%9C%BC%EB%A1%9C" rel="noopener" class="external-link" href="https://kepler-dev-3141.github.io/#fn-2-e3f99f632f1087fe)%EC%9C%BC%EB%A1%9C" target="_blank">https://kepler-dev-3141.github.io/#fn-2-e3f99f632f1087fe)으로</a> 사용하는 접근법입니다. 모델은 이미지와 자연어 문장을 한 쌍으로 학습하게 되며 이러한 접근법은 다음과 같은 장점을 가집니다.<br>
<br>crowd-sourced labeling에 비해서 자연어 지도를 확장하는 것이 쉽다.
<br>단순히 표현을 학습하는 것이 아니라 표현을 언어롸 연결시켜 zero-shot을 가능하도록 한다.
<br><br>기존 연구에서는 주로 MS-COCO, Visual Genome, YFCC100M 세 가지 데이터셋을 사용 해 왔습니다. MS-COCO와 Visual Genome는 crowd-sorced labeling 된 데이터셋이지만, 각각 약 10만 개의 적은 수의 학습용 이미지를 가지고 있는 문제가 있었습니다. YFCC100M은 1억 개의 이미지로 구성되어 있지만 이미지의 메타데이터가 부족하고 데이터의 품질이 들쭉날쭉하다는 문제가 있었습니다. 이러한 문제로 기존 데이터셋을 이용하지 않고 인터넷에서 4억개의 이미지와 텍스트 쌍을 수집하여 새로운 데이터셋을 구축하였습니다.<br><br>(이미지, 텍스트)를 한 쌍으로 하는 N개의 배치에 대하여 CLIP은 N × N개의 가능한 경우에 대하여 예측하도록 학습됩니다. N개의 올바른 경우에 대해서는 이미지와 텍스트 임베딩의 코사인 유사성을 최대화하고, N² - N개의 잘못된 임베딩에 대해서는 최소화합니다. 유사성 점수는 Symmetric Cross Entropy Loss를 이용하여 최적화합니다. 학습 중 사용된 유일한 데이터 증강은 크기가 조정된 정사각형 자르기입니다.<br><img alt="Pasted image 20240715002034.png" src="https://kepler-dev-3141.github.io/pasted-image-20240715002034.png" referrerpolicy="no-referrer"><br><br>이미지 인코더는 변형된<br>
Gloabal Average Pooling을 Attention Pooling으로 대체한 ResNet-50과 임베딩에 Layer Normalization을 적용한 Vision Transformer 두 아키텍처를 고려하였습니다.<br>텍스트 인코더는 트랜스포머를 사용했습니다. 기본 크기로 6300만 매개변수의 12 레이어, 512폭의 모델을 8개의 attention head와 함께 사용했습니다. 트랜스포머는 49,152 크기의 소문자 바이트 페어 인코딩으로 텍스트를 처리합니다.<br><br>
<br>유연하고 일반적<br>
CLIP 모델은 zero-shot 방식으로 사용하도록 의도되었고 실제로도 작업에서 zero-shot으로 수행을 할 수 있다. 특히 ImageNet모델에서는 발생하지 않았던 OCR 학습이 일어났다.
<br>자연어 이해<br>
CLIP은 이미지와 자연어를 쌍으로 학습하여 텍스트 기반 이미지 검색 또는 이미지 분류를 할 수 있습니다.
<br>구체적이나 복잡한 작업에서는 성능 저하<br>
CLIP 모델은 일반적인 객체를 인식하는 부분에서는 좋은 성능을 보여주지만, 이미지에서 차량이 얼마나 가까운지, 자동차 또는 꽃 종류를 구분하는 작업에서는 성능이 좋지 못함을 보여주었다.
<br>데이터 편향성<br>
CLIP은 데이터를 인터넷에서 수집하여 학습하므로 사회적 편향을 학습하게 되는 문제가 있다.
<br>이 글은 아래의 글들을 참고하여 작성되었습니다.<br><a rel="noopener" class="external-link" href="https://arxiv.org/abs/2103.00020" target="_blank">https://arxiv.org/abs/2103.00020</a><br><a rel="noopener" class="external-link" href="https://openai.com/index/clip/" target="_blank">https://openai.com/index/clip/</a><br><a data-tooltip-position="top" aria-label="https://velog.io/@conel77/%EB%85%BC%EB%AC%B8-%EB%A6%AC%EB%B7%B0-CLIP-Learning-Transferable-Visual-Models-From-Natural-Language-Supervision%EC%9E%91%EC%84%B1%EC%A4%91" rel="noopener" class="external-link" href="https://velog.io/@conel77/%EB%85%BC%EB%AC%B8-%EB%A6%AC%EB%B7%B0-CLIP-Learning-Transferable-Visual-Models-From-Natural-Language-Supervision%EC%9E%91%EC%84%B1%EC%A4%91" target="_blank">https://velog.io/@conel77/논문-리뷰-CLIP-Learning-Transferable-Visual-Models-From-Natural-Language-Supervision작성중</a><br><a rel="noopener" class="external-link" href="https://ffighting.net/deep-learning-paper-review/multimodal-model/clip/#3_CLIP" target="_blank">https://ffighting.net/deep-learning-paper-review/multimodal-model/clip/#3_CLIP</a><br><br><br>categorical cross entropy (CCE)에 대해 알아본다.<br><br>Categorical Cross Entropy : 분류해야할 클래스가 3개 이상인 멀티 클래스 분포에 사용하며 one-hot 형태이다.<br>ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ<br>정보량(놀람) : 확률과 반비례. 확률이 1이면 (0~1) 정보량은 0<br>−log(pi​),&nbsp;pi​&nbsp;=사건의&nbsp;확률​<br>​<br>cross entropy는 두 가지 확률 분포간의 차이를 나타낼 수 있다.<br>H(P,&nbsp;Q)=−n∑ipi​log(qi​)​<br>p는 실제 확률분포, q는 예측한 확률분포.<br>​<br>​Categorical Cross Entropy는 분류해야할 클래스가 3개 이상인 멀티 클래스 분포에 사용하며,<br>라벨이 one-hot 형태일 때 사용된다. ex) [1,0,0], [0,1,0], [0,0,1]<br>( 라벨이 정수 형태인 경우 Sparse_Catecorical Cross Entropy 사용. ex) [0, 1, 2, ... ] )<br>L=−1N​N∑j=1C∑i=1pij​log(qij​)​<br>N은 훈련 샘플의 갯수, C는 클래수의 갯수<br>ont-hot 형태이기 때문에 정답에 가까워 질수록 0에 수렴한다.<br> 확률이 1이면 정보량은 0이기 때문에 때문<br>softmax 활성함수와 같이 쓰이는 경우가 많아 softmax activation function이라고도 불린다.<br>softmax : 로짓(점수)이 있는 벡터를 받아 합이 1인 확률을 가진 벡터를 출력<br>[출처] <a data-tooltip-position="top" aria-label="https://blog.naver.com/sws040201/223512772098" rel="noopener" class="external-link" href="https://blog.naver.com/sws040201/223512772098" target="_blank">Categorical Cross Entropy</a>|작성자 <a data-tooltip-position="top" aria-label="https://blog.naver.com/sws040201" rel="noopener" class="external-link" href="https://blog.naver.com/sws040201" target="_blank">sws040201</a><br><br><br>Binary Cross-Entropy (BCE) Loss에 대한 개념을 학습한다.<br><br>Binary Cross-Entropy (BCE) Loss란?<br>
이진 분류 문제에서 실제 클래스와 예측 확률 사이의 차이를 측정하는 손실 함수<br><br><img alt="team-blog-코딩황제들-2024-week1.모각코1일차회의인증.png" src="lib\media\team-blog-코딩황제들-2024-week1.모각코1일차회의인증.png"><img alt="team-blog-코딩황제들-2024-week1.모각코1일차시간인증.jpg" src="lib\media\team-blog-코딩황제들-2024-week1.모각코1일차시간인증.jpg">]]></description><link>team's-blog\코딩황제들\7월-14일-모각코.html</link><guid isPermaLink="false">team's blog/코딩황제들/7월 14일 모각코.md</guid><pubDate>Thu, 01 Aug 2024 12:32:23 GMT</pubDate><enclosure url="lib\media\team-blog-코딩황제들-2024-week1.20240714212929.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="lib\media\team-blog-코딩황제들-2024-week1.20240714212929.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[계획]]></title><description><![CDATA[ 
 <br><br>프로젝트의 목표에 맞는 데이터 특성에 가장 적합한 손실 함수를 찾기 위해 다양한 손실함수에 대해 공부한다. 각 로스함수의 수학적 정의 및 유도과정 이해, 각 로스함수가 사용되는 모델과 그 이유(어떤 모델과 문제에 적합한지), 장 단점 분석, 간단한 구현예제를 작성해보면서 이해해본다. 또한 다양한 학습방법 및 디퓨전모델에 대해서도 알아본다.<br>회의방법<br>
온라인(naver whale on) *zoom은 40분이상하려면 유료로 결제를 해야하기 때문에 whale on을 활용했습니다.<br>팀원 블로그<br>
박세준 <a rel="noopener" class="external-link" href="https://kepler-dev-3141.github.io/" target="_blank">https://kepler-dev-3141.github.io/</a><br>
신우석 <a rel="noopener" class="external-link" href="https://blog.naver.com/sws040201/" target="_blank">https://blog.naver.com/sws040201/</a><br>
김채연 <a rel="noopener" class="external-link" href="https://kcyeon0127.github.io/" target="_blank">https://kcyeon0127.github.io/</a><br><br><br><br> Earth Mover's Distance (EMD) 개념을 바탕으로 wassertein distance 및 wassertein 손실함수에 대한 개념을 확실히 정립한다.<br><br><br>러시아 수학자 Leanid Vaserstein 의 이름을 딴 것으로 Roland Dobtushin 교수가 1970년에 확률론에 도입한 것이다.<br>
<img alt="team-blog-코딩황제들-2024-week2.wasserstain공식.png" src="lib\media\team-blog-코딩황제들-2024-week2.wasserstain공식.png"><br>
GAN에서 discriminator가 학습도중에 잘 죽는 현상이 나타나는데, 이를 해결하고자 하는것이 wasserstain loss이다. 이는 wasserstein distance를 최소화시키는 것이 목표이다.<br>
위식에서 위의 내용이 Wasserstein distance의 정의다.<br>여기에서 <img src="https://t1.daumcdn.net/cfile/tistory/9984A03359A4215B2E" referrerpolicy="no-referrer"> 는 두 확률분포 , P,Q의 결합확률분포(joint distribution)들을 모은 집합이고, 그 중에&nbsp;<br><img src="https://t1.daumcdn.net/cfile/tistory/991E073359A4217412" referrerpolicy="no-referrer">는 그 중 하나입니다. 즉 모든 결합확률분포&nbsp;<img src="https://t1.daumcdn.net/cfile/tistory/9951703359A4218E22" referrerpolicy="no-referrer">&nbsp;중에서 d(x,y)의 기댓값을 가장 작게 추정한 값을 의미합니다. <br>즉 두 확률분포의 연관성을 측정하여 그 거리의 기대값이 가장 작을때의 distance를 wasserstein distance라고 얘기를 합니다. <br><br>주변 확률 분포 P와 Q:<br>
<br>
P와 Q는 각각 X와 Y의 주변 확률 분포입니다.

<br>
주변 확률 분포는 각각의 확률 변수가 따르는 분포의 모양을 나타냅니다.

<br>
예를 들어, P와 Q가 모두 정규 분포라면, X와 Y는 각각 정규 분포를 따릅니다.<br>
결합 확률 분포 γ:

<br>
γ는 X와 Y의 결합 확률 분포로, w에 따라 샘플링된 X와 Y의 쌍의 분포를 나타냅니다.

<br>
결합 확률 분포는 두 확률 변수 간의 관계(의존성)를 나타냅니다.

<br>
다양한 γ는 서로 다른 X와 Y의 결합 방식을 의미합니다.

<br><br><img alt="team-blog-코딩황제들-2024-week2.wasserstain설명1.png" src="lib\media\team-blog-코딩황제들-2024-week2.wasserstain설명1.png"><br>표본 공간에서 w를 하나 샘플링 하면 X(w)와 Y(w)를 뽑을 수 있고 이때 두 점 간의 거리 d(X(w),Y(w)) 역시 계산 할수 있다.<br><br><img alt="team-blog-코딩황제들-2024-week2.wasserstain설명2.png" src="lib\media\team-blog-코딩황제들-2024-week2.wasserstain설명2.png"><br>샘플링을 계속 할수록 (X, Y)의 결합 확률 분포 γ의 윤곽이 나오게 더불어서 (P, Q)는 γ의 주변확률분포가 됩니다.<br><br><img alt="team-blog-코딩황제들-2024-week2.wasserstain설명3.png" src="lib\media\team-blog-코딩황제들-2024-week2.wasserstain설명3.png"><br>
이때 γ가 두 확률변수 X, Y의 연관성을 어떻게 측정하느냐에 따라 d(X, Y)의 분포가 달라지게 됩니다.<br><br><img alt="team-blog-코딩황제들-2024-week2.wasserstain설명4.png" src="lib\media\team-blog-코딩황제들-2024-week2.wasserstain설명4.png"><br>
주의할 점은 P와 Q는 바뀌지 않기 때문에 각 X와 Y 가 분포하는 모양은 변하지 않습니다. 다만 w에 따라 뽑히는 경향이 달라질 뿐이다.<br><br>
<br>
P와 Q:

<br>X는 정규 분포 P를 따릅니다.
<br>Y는 균등 분포 Q를 따릅니다.


<br>
결합 확률 분포 γ1​:

<br>γ1​에서는 X가 클 때 Y도 클 확률이 높습니다.
<br>즉, ω가 큰 값을 가질 때 X(ω)와 Y(ω) 모두 큰 값을 가질 경향이 있습니다.


<br>
결합 확률 분포 γ2​:<br>
- γ2​에서는 X가 클 때 Y가 작을 확률이 높습니다.<br>
- 즉, ω가 큰 값을 가질 때 X(ω)는 큰 값을, Y(ω)는 작은 값을 가질 경향이 있습니다.<br>
요약

<br>
변하지 않는 것:

<br>P와 Q의 모양(즉, X와 Y의 분포)은 변하지 않습니다.
<br>X는 항상 정규 분포를 따르고, Y는 항상 균등 분포를 따릅니다.


<br>
변하는 것:

<br>γ에 따라 X와 Y가 뽑히는 경향이 달라집니다.
<br>즉, 두 변수 X와 Y의 결합 관계(의존성)가 달라집니다.


<br><br><img alt="team-blog-코딩황제들-2024-week2.wasserstain설명5.png" src="lib\media\team-blog-코딩황제들-2024-week2.wasserstain설명5.png"><br>
Wasserstein distance 는 이렇게 여러가지 γ중에서 d(X, Y) 의 기댓값이 가장 작게 나오는 확률분포를 취하게 된다.<br>그래서 Wasserstein GAN은 이 Wasserstein distance를 이용해서 GAN의 문제를 푸는 것이다.<br><br><br><br>Diffusion Model의 간단한 정의와 학습 방법에 대해 알아보기<br><br><br>Diffusion Model이란 입력 이미지에 여러 단계로 노이즈를 가하고, 거꾸로 노이즈를 없애는 방향으로 학습을 하여 입력 이미지와 비슷한 이미지를 생성하는 모델입니다. Diffusion Model은 기존 모델이 가지고 있는 tractability와 flexibility의 trade-off 관계를 해결하기 위해 만들어졌습니다. tractable하다는 것은 분석적으로 평가할 수 있고 잘 설명할 수 있다는 것 이고 flexible하다는 것은 많은 데이터에 대해 설명할 수 있다는 것을 말합니다.<br>논문 저자들이 제안한 새로운 확률 모델의 특징은 아래와 같습니다.<br>
<br>모델 구조의 극단적인 유연성
<br>정확한 샘플링
<br>다른 분포와의 쉬운 곱셈
<br>모델 로그 가능도와 개별 상태의 확률을 저렴하게 평가할 수 있음
<br><br><br><img alt="team-blog-코딩황제들-2024-week2.세준1.png" src="lib\media\team-blog-코딩황제들-2024-week2.세준1.png"><br>
Forward Diffusion 과정은 원본 이미지 X0에서 점차 노이즈를 가해 최종적으로는 완전한 노이즈 이미지인 XT가 되게 됩니다.<br><br><img alt="team-blog-코딩황제들-2024-week2.세준2.png" src="lib\media\team-blog-코딩황제들-2024-week2.세준2.png"><br>
Forward Diffusion 과정은 노이즈 이미지 XT로부터 노이즈를 점차 제거해 나가 X0가 되게 됩니다.<br><br><a rel="noopener" class="external-link" href="https://proceedings.mlr.press/v37/sohl-dickstein15.html" target="_blank">https://proceedings.mlr.press/v37/sohl-dickstein15.html</a><br>
<a rel="noopener" class="external-link" href="https://aigong.tistory.com/569" target="_blank">https://aigong.tistory.com/569</a><br>
<a rel="noopener" class="external-link" href="https://ffighting.net/deep-learning-paper-review/diffusion-model/diffusion-model-basic/" target="_blank">https://ffighting.net/deep-learning-paper-review/diffusion-model/diffusion-model-basic/</a><br><br><br>sparse_categorical cross entropy (CCE)에 대해 알아본다.<br><br>Sparse_Categorical Cross Entropy : 라벨이 정수 형태로 주어지는 CCE이다.<br>
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ<br>​라벨이 정수 형태인 경우 Sparse_Categorical Cross Entropy를 사용한다. ex) [0, 1, 2, ... ]<br><br>yj는\ 훈련\ 샘플의\ 라벨,\ \ qyj는\ \ 예측한\ \ 클래스\ \ yj에\ \ 대한\ \ 확률<br>​<br>모델 학습 과정<br>​입력 데이터가 모델을 통해 전달되어 각 클래스에 대한 예측 확률을 출력한다. 이때 주로 softmax 활성화 함수를 사용하여 예측 확률을 계산한다.<br>CCE 손실 함수를 사용하여 예측 확률과 실제 레이블 간의 차이를 측정한다.<br>손실 함수의 미분값(그래디언트)을 계산하여 모델의 가중치를 업데이트하여 예측을 더 정확하게 만들 수 있다.<br>[출처] <a data-tooltip-position="top" aria-label="https://blog.naver.com/sws040201/223520799869" rel="noopener" class="external-link" href="https://blog.naver.com/sws040201/223520799869" target="_blank">Sparse_Categorical Cross Entropy (7/21)</a>|작성자 <a data-tooltip-position="top" aria-label="https://blog.naver.com/sws040201" rel="noopener" class="external-link" href="https://blog.naver.com/sws040201" target="_blank">sws040201</a><br><br><br>BCELoss, BCEWithLogitsLoss, CrossEntropyLoss function에 대해 알아본다.<br><br>BCELoss 크로스 엔트로피 손실 함수는 정보 이론에서 크로스 엔트로피 개념을 기계 학습에 적용한 것이다. 이 함수는 두 확률 분포 간의 차이를 측정하는 방법으로, BCE 손실 함수는 크로스 엔트로피 손실 함수를 이진 분류 문제에 적용한 형태이다.<br>[ H(P, Q) = -\sum_{x} P(x) \log Q(x) ]<br>BCELoss는 모델의 구조 상에 마지막 Layer가 Sigmoid 혹은 Softmax로 되어 있는 경우 이를 사용한다. 즉, 모델의 출력이 각 라벨에 대한 확률값으로 구성되었을 때 사용이 가능하다. ''' torch.nn.BCELoss(weight=None, size_average=None, reduce=None, reduction='mean') '''<br>''' import torch import torch.nn as nn m = nn.Sigmoid() loss = nn.BCELoss() input = torch.randn(3, 2, requires_grad=True) target = torch.rand(3, 2) output = loss(m(input), target) output.backward() '''<br>BCEWithLogitsLoss ''' torch.nn.BCEWithLogitsLoss(weight=None, size_average=None, reduce=None, reduction='mean', pos_weight=None) '''<br>BCEWithLogitsLoss는 이름에서도 유추해볼 수 있듯 BCELoss를 위 과정에서 확률값(Logits)으로 변환하지 않더라도 계산되는 것을 의미한다. 기본적인 BCE 손실 함수는 모델의 출력이 시그모이드 함수를 통과한 확률 값이어야 한다. 그러나 이 경우수치적 불안정성(시그모이드 함수의 출력은 0과 1 사이의 값이기 때문에, 극단적인 값(예: 매우 큰 음수나 양수)에 대해 수치적으로 불안정할 수 있다.) 효율성 문제(시그모이드 함수와 BCE 손실 함수를 따로 적용하면 계산 비용이 증가할 수 있다.)가 존재할 수 있다<br>따라서 BCEWithLogitsLoss는 시그모이드 활성화 함수를 적용한 후 BCE 손실을 계산하는 과정을 하나의 함수로 처리한다. 내부적으로 시그모이드 함수를 적용하고 BCE 손실을 계산하므로, 더 안정적이고 효율적이다.<br>[ \text{BCEWithLogitsLoss} = -\frac{1}{N} \sum_{i=1}^{N} \left[ y_i \log(\sigma(z_i)) + (1 - y_i) \log(1 - \sigma(z_i)) \right] ]<br>여기서:<br>
<br>( N )은 샘플의 수
<br>( y_i )는 실제 레이블 (0 또는 1)
<br>( z_i )는 모델의 출력(로그 확률)
<br>( \sigma(z) )는 시그모이드 함수로, (\sigma(z) = \frac{1}{1 + e^{-z}} )
<br>CrossEntropyLoss ''' torch.nn.CrossEntropyLoss(weight=None, size_average=None, ignore_index=-100, reduce=None, reduction='mean', label_smoothing=0.0) ''' weight:<br>타입: Tensor, 선택 사항 설명: 각 클래스에 대한 가중치를 지정할 수 있습니다. 클래스 불균형 문제를 해결하기 위해 사용됩니다. None으로 설정하면 모든 클래스에 동일한 가중치가 적용됩니다. size_average:<br>타입: bool, 선택 사항 (기본값: None) 설명: 이 파라미터는 더 이상 사용되지 않습니다. reduction 파라미터로 대체되었습니다. True로 설정하면 손실이 평균화되고, False로 설정하면 합산됩니다. ignore_index:<br>타입: int, 선택 사항 설명: 특정 클래스 인덱스를 무시할 수 있습니다. 주로 시퀀스 모델링에서 패딩 토큰을 무시하는 데 사용됩니다. 기본값은 -100입니다. reduce:<br>타입: bool, 선택 사항 (기본값: None) 설명: 이 파라미터도 더 이상 사용되지 않습니다. reduction 파라미터로 대체되었습니다. True로 설정하면 손실이 축소되고, False로 설정하면 축소되지 않습니다. reduction:<br>타입: str, 선택 사항 설명: 손실 결과를 어떻게 축소할지를 정의합니다. 세 가지 옵션이 있습니다: 'none': 손실을 축소하지 않고 각 샘플에 대한 손실을 반환합니다. 'mean': 손실을 평균화합니다. (size_average=True와 동일) 'sum': 손실을 합산합니다. (reduce=False와 동일) label_smoothing:<br>타입: float, 선택 사항 설명: 라벨 스무딩을 적용합니다. label_smoothing 값을 [0, 1] 사이로 설정하면, 라벨을 약간의 확률로 스무딩합니다. 이는 모델이 과도하게 확신하는 것을 방지하고 일반화 성능을 향상시킬 수 있습니다. 기본값은 0.0입니다.<br>이전에 다룬 BCELoss와 BCEWithLogitsLoss는 Binary Classification을 위한 손실 함수다. 반면에 CrossEntropyLoss는 다중 분류를 위한 손실 함수다. 예를 들어, 라벨이 5개라고 한다면 입력은 각 라벨에 대한 확률값을 표현하고, 정답 라벨은 라벨 값 혹은 라벨에 대한 확률값으로 표현할 수 있다. 소프트맥스 활성화 함수와 크로스 엔트로피 손실을 결합한 함수로 예측 값과 실제 값 간의 차이를 직관적으로 표현할 수 있지만, 확률이 매우 작은 경우, 로그 함수로 인해 수치적 불안정성이 발생할 수 있고, 클래스가 불균형한 경우 성능이 저하될 수 있습니다. 이 문제를 해결하기 위해 가중치 조정 등을 사용할 수 있다.<br>[ \text{CrossEntropyLoss} = -\sum{i=1}^{N} \sum{c=1}^{C} y{ic} \log(p{ic}) ]<br>여기서:<br>
<br>( N )은 샘플의 수
<br>( C )는 클래스의 수
<br>( y_{ic} )는 실제 레이블의 원-핫 인코딩 (실제 레이블이 ( c ) 클래스일 때 1, 그렇지 않으면 0)
<br>( p_{ic} )는 모델이 샘플 ( i )에 대해 클래스 ( c )일 확률로 예측한 값 (소프트맥스 함수의 출력)
<br><br><img alt="team-blog-코딩황제들-2024-week2.모각코2일차회의인증.png" src="lib\media\team-blog-코딩황제들-2024-week2.모각코2일차회의인증.png"><br><img alt="team-blog-코딩황제들-2024-week2.모각코2일차시간인증.jpg" src="lib\media\team-blog-코딩황제들-2024-week2.모각코2일차시간인증.jpg">]]></description><link>team's-blog\코딩황제들\7월-21일-모각코.html</link><guid isPermaLink="false">team's blog/코딩황제들/7월 21일 모각코.md</guid><pubDate>Mon, 22 Jul 2024 17:12:55 GMT</pubDate><enclosure url="lib\media\team-blog-코딩황제들-2024-week2.wasserstain공식.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="lib\media\team-blog-코딩황제들-2024-week2.wasserstain공식.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[계획]]></title><description><![CDATA[ 
 <br><br>프로젝트의 목표에 맞는 데이터 특성에 가장 적합한 손실 함수를 찾기 위해 다양한 손실함수에 대해 공부한다. 각 로스함수의 수학적 정의 및 유도과정 이해, 각 로스함수가 사용되는 모델과 그 이유(어떤 모델과 문제에 적합한지), 장 단점 분석, 간단한 구현예제를 작성해보면서 이해해본다. 또한 다양한 학습방법 및 디퓨전모델에 대해서도 알아본다.<br>회의방법<br>
온라인(naver whale on) *zoom은 40분이상하려면 유료로 결제를 해야하기 때문에 whale on을 활용했습니다. <br>팀원 블로그<br>
박세준 <a rel="noopener" class="external-link" href="https://kepler-dev-3141.github.io/" target="_blank">https://kepler-dev-3141.github.io/</a><br>
신우석 <a rel="noopener" class="external-link" href="https://blog.naver.com/sws040201/" target="_blank">https://blog.naver.com/sws040201/</a><br>
김채연 <a rel="noopener" class="external-link" href="https://kcyeon0127.github.io/" target="_blank">https://kcyeon0127.github.io/</a><br><br><br><br>Wasserstein Loss를 사용한 GAN 예제 코드를 작성해보면서 이를 통해 GAN의 기본 개념과 WGAN의 작동 방식을 이해해본다<br><br>이 WGAN 예제는 단순히 1차원 정규 분포 데이터를 생성자와 판별자가 학습하도록 설계를 하였습니다.<br><a data-tooltip-position="top" aria-label="https://colab.research.google.com/drive/1aHY4LrJE3tFZJ_ZwJFUZ5qGxkTtHY0fG#scrollTo=wex4SWI7G0qU&amp;uniqifier=1" rel="noopener" class="external-link" href="https://colab.research.google.com/drive/1aHY4LrJE3tFZJ_ZwJFUZ5qGxkTtHY0fG#scrollTo=wex4SWI7G0qU&amp;uniqifier=1" target="_blank">WGAN  example.ipynb - Colab (google.com)</a><br>
<br>


<br>
<br>
라이브러리 임포트:

<br>numpy와 tensorflow 라이브러리를 임포트합니다.


<br>
Wasserstein 손실 함수 정의:

<br>wasserstein_loss(y_true, y_pred): 실제 값과 예측 값의 곱의 평균을 계산하는 손실 함수입니다.


<br>
생성자 모델 정의:

<br>build_generator(): 단순한 두 개의 Dense 레이어로 구성된 생성자 모델입니다.
<br>첫 번째 레이어는 16개의 노드를 사용하고, 두 번째 레이어는 단일 값을 출력합니다.


<br>
판별자 모델 정의:

<br>build_discriminator(): 단순한 두 개의 Dense 레이어로 구성된 판별자 모델입니다.
<br>첫 번째 레이어는 16개의 노드를 사용하고, 두 번째 레이어는 단일 값을 출력합니다.


<br>
데이터 생성 함수:

<br>generate_real_data(samples): 지정된 샘플 수만큼 1차원 정규 분포 데이터를 생성합니다.


<br>
훈련 함수:

<br>train(generator, discriminator, epochs, batch_size, latent_dim): 생성자와 판별자를 훈련시키는 함수입니다.
<br>각 에포크마다 판별자를 훈련시키고, 그 다음 생성자를 훈련시킵니다.


<br>
파라미터 설정:

<br>latent_dim: 잠재 공간의 차원
<br>samples: 전체 샘플 수
<br>batch_size: 배치 크기
<br>epochs: 학습 에포크 수


<br>
모델 빌드 및 컴파일:

<br>생성자와 판별자 모델을 빌드하고, RMSprop 옵티마이저와 함께 wasserstein_loss 손실 함수를 사용하여 컴파일합니다.


<br>
GAN 모델 빌드 및 컴파일:

<br>판별자의 가중치를 동결하고, 생성자와 판별자를 결합하여 GAN 모델을 빌드합니다.
<br>결합된 모델을 RMSprop 옵티마이저와 함께 wasserstein_loss 손실 함수를 사용하여 컴파일합니다.


<br>
모델 훈련:

<br>train(generator, discriminator, epochs, batch_size, latent_dim): GAN 모델을 훈련합니다.


<br><br><br><br><br><br>softmax에 대해 알아본다.<br><br>logit은 log odds를 뜻한다. odds는 얻을 확률과 잃을 확률의 비 라고 생각하면 된다.<br>odds에서 얻을 확률을 y라고 하면 잃을 확률은 1-y가 된다.<br>Classes : C1, C2<br>P(C1|X) : y, P(C2|X) : 1-y<br>odds&nbsp;=&nbsp;y1−y​=P(C1​∣X)1−P(C1​∣X)​​<br>​<br>신경망(Neural Network, NN)을 생각할 때, 출력층의 값 z를 계산하는 방식은<br>$z\ =\ \combi{\theta }_0+\combi{\theta }_1\combi{x}_1+\combi{\theta }_2\combi{x}_2+\cdot \cdot \cdot $z&nbsp;=&nbsp;θ0​+θ1​x1​+θ2​x2​+···​<br>θ는 신경망의 가중치이고, x는 입력 값이다. 범위는 -∞&lt;z&lt;∞ 이다.<br>log(odds)또한 odds에 로그를 취한 것이므로 범위는 같다.<br>​<br>logit과 z의 범위가 같으니 logit을 z로 두고 식을 전개한다.<br>z&nbsp;=&nbsp;log(y1−y​),&nbsp;ez=(y1−y​)​<br>y&nbsp;=&nbsp;ez1+ez​​<br>이 식은 sigmoid 함수와 동일하다. 여기서 e^-z를 분모와 분자에 곱해주면 같아진다.<br>따라서 sigmoid와 logit은 역함수 관계임을 알 수 있다.<br>sigmoid&nbsp;=&nbsp;11+℮−z​​<br>​softmax는 sigmoid 함수를 다중 클래스 분류로 일반화하면 유도할 수 있다.<br>[출처] <a data-tooltip-position="top" aria-label="https://blog.naver.com/sws040201/223533552641" rel="noopener" class="external-link" href="https://blog.naver.com/sws040201/223533552641" target="_blank">8/01</a>|작성자 <a data-tooltip-position="top" aria-label="https://blog.naver.com/sws040201" rel="noopener" class="external-link" href="https://blog.naver.com/sws040201" target="_blank">sws040201</a><br><br><br><br>Binary Cross-Entropy (BCE) Loss의 수학적으로 이해해본다.<br><br>Binary Cross-Entropy (BCE) Loss의 수식을 수학적으로 설명하겠습니다. BCE Loss는 이진 분류 문제에서 모델의 예측 확률과 실제 라벨 간의 차이를 측정하는 손실 함수입니다. 이를 통해 모델의 성능을 평가하고, 최적화할 수 있습니다.<br>BCE Loss:<br>[ L = - 1/N {sum_i=1~N} [ y_i  log(p_i) + (1 - y_i)  log(1 - p_i) ]<br>
<br>( L )은 손실 함수의 값
<br>( N )은 총 샘플 수
<br>( y_i )는 i번째 샘플의 실제 라벨(이진 분류 문제에서는 0 또는 1)
<br>( p_i )는 i번째 샘플이 클래스 1일 확률로 모델이 예측한 값 (0과 1 사이의 값)
<br>
<br>로그항 (( log(p_i) )와 ( log(1 - p_i) )):

<br>로그는 정보 이론에서 엔트로피를 계산할 때 사용됩니다. 여기서 로그를 사용하는 이유는 예측 확률이 낮을 때 페널티를 크게 주기 위함입니다.
<br>( \log(p_i) ): 모델이 클래스 1일 확률을 예측한 값에 로그를 취한다.
<br>( \log(1 - p_i) ): 모델이 클래스 0일 확률을 예측한 값에 로그를 취합니다.


<br>( p_i )가 1에 가까워질수록 ( \log(p_i) )는 0에 가까워지고, ( p_i )가 0에 가까워질수록 ( \log(p_i) )는 음의 무한대로 커진다. 로그 함수를 사용하면 예측 확률이 낮을 때 손실 값이 급격히 커지게 된다. 이는 모델이 잘못된 예측을 할 경우 큰 페널티를 부과하여, 모델이 더 정확한 예측을 하도록 유도한다.<br>
<br>실제 라벨 (( y_i ))에 따른 조건부 손실:

<br>( y_i = 1 )일 때, 손실 항목은 ( \log(p_i) )가 된다. 이는 모델이 클래스 1일 확률을 얼마나 잘 예측했는지를 나타낸다.
<br>( y_i = 0 )일 때, 손실 항목은 ( \log(1 - p_i) )가 된다. 이는 모델이 클래스 0일 확률을 얼마나 잘 예측했는지를 나타낸다.


<br>전체 손실 계산:

<br>( -[ y_i  log(p_i) + (1 - y_i)  log(1 - p_i) ] )는 i번째 샘플의 손실을 계산한다.
<br>각 샘플의 손실을 모두 더한 후, ( N )으로 나누어 평균 손실을 구한다. 이는 샘플 수에 관계없이 일관된 손실 값을 제공한다.


<br>부호:

<br>확률p가 0.5보다 작으면 로그 값은 음수가 되기 때문에 해석하기 어려워질 수 있고, 해석이 일관되게 하기 위해서, BCE Loss는 로그 값의 음수를 취하여 손실 값을 양수로 만든다. ( 손실 값을 양수로 만들기 위해 전체에 -1을 곱합니다.)


<br>BCE Loss는 모델이 예측한 확률 ( p_i )와 실제 라벨 ( y_i ) 간의 차이를 로그 함수와 결합하여 측정하며, 이를 통해 모델이 얼마나 잘 예측하는지를 평가한다. 이 손실 함수를 최소화함으로써 모델의 성능을 최적화할 수 있다.<br><br><img alt="team-blog-코딩황제들-2024-week3.모각코3일차회의인증.png" src="lib\media\team-blog-코딩황제들-2024-week3.모각코3일차회의인증.png"><br>
<img alt="team-blog-코딩황제들-2024-week3.모각코3일차시간인증.jpg" src="lib\media\team-blog-코딩황제들-2024-week3.모각코3일차시간인증.jpg">]]></description><link>team's-blog\코딩황제들\7월-28일-모각코.html</link><guid isPermaLink="false">team's blog/코딩황제들/7월 28일 모각코.md</guid><pubDate>Sun, 04 Aug 2024 17:37:06 GMT</pubDate><enclosure url="lib\media\team-blog-코딩황제들-2024-week3.모각코3일차회의인증.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="lib\media\team-blog-코딩황제들-2024-week3.모각코3일차회의인증.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[팀 소개]]></title><description><![CDATA[ 
 <br><br>안녕하세요 저희는 코딩황제들입니다. 저희 팀은 인공지능학과 4명의 학생으로 구성되어 있습니다.<br><br>박세준 <a rel="noopener" class="external-link" href="https://kepler-dev-3141.github.io/" target="_blank">https://kepler-dev-3141.github.io/</a><br>
신우석 <a rel="noopener" class="external-link" href="https://blog.naver.com/sws040201/" target="_blank">https://blog.naver.com/sws040201/</a><br>
김채연 <a rel="noopener" class="external-link" href="https://kcyeon0127.github.io/" target="_blank">https://kcyeon0127.github.io/</a><br><br>저희의 목표는 생성형 AI를 만들기 위한 모델 디자인 및 구조를 짜기 위해 이론적인 공부를 심도 있게 진행하는 것입니다.<br><br>매주  22:00 ~ 01:00<br>
1회차 : 2024/07/14 22:00 ~ 01:00<br>
2회차 : 2024/07/21&nbsp;22:00 ~ 01:00<br>
3회차 : 2024/07/28&nbsp;22:00 ~ 01:00<br>
4회차 : 2024/08/04&nbsp;22:00 ~ 01:00<br>
5회차 : 2024/08/11&nbsp;22:00 ~ 01:00<br>
6회차 : 2024/08/18&nbsp;22:00 ~ 01:00<br>]]></description><link>team's-blog\코딩황제들\index.html</link><guid isPermaLink="false">team's blog/코딩황제들/index.md</guid><pubDate>Mon, 22 Jul 2024 16:16:36 GMT</pubDate></item><item><title><![CDATA[코딩황제들]]></title><description><![CDATA[ 
 ]]></description><link>team's-blog\코딩황제들\코딩황제들.html</link><guid isPermaLink="false">team's blog/코딩황제들/코딩황제들.md</guid><pubDate>Mon, 15 Jul 2024 18:19:59 GMT</pubDate></item><item><title><![CDATA[team's blog]]></title><description><![CDATA[ 
 ]]></description><link>team's-blog\team's-blog.html</link><guid isPermaLink="false">team's blog/team's blog.md</guid><pubDate>Mon, 15 Jul 2024 18:16:01 GMT</pubDate></item><item><title><![CDATA[index]]></title><description><![CDATA[ 
 ]]></description><link>mogacko\team's-blog\코딩황제들\index.html</link><guid isPermaLink="false">mogacko/team's-blog/코딩황제들/index.md</guid><pubDate>Sun, 14 Jul 2024 14:30:27 GMT</pubDate></item><item><title><![CDATA[8월 11일 모각코]]></title><description><![CDATA[ 
 ]]></description><link>team's-blog\코딩황제들\8월-11일-모각코.html</link><guid isPermaLink="false">team's blog/코딩황제들/8월 11일 모각코.md</guid><pubDate>Wed, 10 Jul 2024 21:24:40 GMT</pubDate></item><item><title><![CDATA[8월 18일 모각코]]></title><description><![CDATA[ 
 ]]></description><link>team's-blog\코딩황제들\8월-18일-모각코.html</link><guid isPermaLink="false">team's blog/코딩황제들/8월 18일 모각코.md</guid><pubDate>Wed, 10 Jul 2024 21:24:40 GMT</pubDate></item></channel></rss>